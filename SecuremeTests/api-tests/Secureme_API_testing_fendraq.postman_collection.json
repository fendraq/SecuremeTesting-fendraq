{
	"info": {
		"_postman_id": "67def87c-8ad9-4b6c-89cb-02e86fdfbbb9",
		"name": "Secureme API testing @fendraq",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43525622",
		"_collection_link": "https://fendraq.postman.co/workspace/fendraq's-Workspace~f3cd1676-47ad-462d-8f2c-8b9abf3f4fc0/collection/43525622-67def87c-8ad9-4b6c-89cb-02e86fdfbbb9?action=share&source=collection_link&creator=43525622"
	},
	"item": [
		{
			"name": "Ärendehantering",
			"item": [
				{
					"name": "TC-012 GET All Cases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Statuskod\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Array\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"array\");\r",
									"});\r",
									"//Object within the array\r",
									"pm.test(\"Response is an object within the array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData[0]).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cases",
							"host": [
								"{{host}}"
							],
							"path": [
								"cases"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-013 POST New Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Spara id för återanvändning i New Chatt Message och Backoffice Chat\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"caseData\": {\r\n        \"category\": \"Shipping\",\r\n        \"title\": \"Problem  med leverans\",\r\n        \"customer_first_name\": \"Janne\",\r\n        \"customer_last_name\": \"Andersson\",\r\n        \"customer_email\": \"fendraq@gmail.com\"\r\n    },\r\n    \"messageData\": {\r\n        \"text\": \"Text\",\r\n        \"is_sender_customer\": true\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cases",
							"host": [
								"{{host}}"
							],
							"path": [
								"cases"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-022 Get Case by User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/user-cases/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"user-cases",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chatthantering",
			"item": [
				{
					"name": "TC-014 GET Customer Unique Chat Data With Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function(){\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response object contains caseDetails, messages and user\", function(){\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"caseDetails\");\r",
									"    pm.expect(response).to.have.property(\"messages\");\r",
									"    pm.expect(response).to.have.property(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/chat/case/{{chatToken}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								"case",
								"{{chatToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-015 POST New Chat Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"case_id\": \"20\",\r\n    \"text\": \"Meddelande 1 från kundsupport\",\r\n    \"is_sender_customer\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chat/new-message",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								"new-message"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-016 PATCH Close Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/chat/close-case/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								"close-case",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-017 GET Backoffice Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function(){\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response object contains messages and user\", function(){\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"messages\");\r",
									"    pm.expect(response).to.have.property(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/chat/backoffice/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								"backoffice",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inloggningshantering",
			"item": [
				{
					"name": "TC-018 GET Session User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-019 POST Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"User_name\": \"support8\",\r\n    \"Password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-020 DELETE Login",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Användarhantering",
			"item": [
				{
					"name": "TC-021 GET All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-023 POST New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Save userId"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"User_name\": \"TestUser\",\r\n    \"Password\": \"password\",\r\n    \"Role\": \"customer_support\",\r\n    \"Email\": \"test@mail.com\",\r\n    \"Active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/new-user",
							"host": [
								"{{host}}"
							],
							"path": [
								"new-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-024 PATCH Update user",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"User_name\": \"TestUser2\",\r\n    \"Password\": \"lösenord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/6",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-025 Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.get(\"IGNORE_TESTS\") === \"true\") {\r",
									"    pm.test.skip(\"This test is ignored in CI, because delete of user contradicts FK rules\");\r",
									"} else {\r",
									"    pm.test(\"This test should pass\", function () {\r",
									"        pm.expect(responseCode.code).to.equal(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/6",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-026 PUT Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.get(\"IGNORE_TESTS\") === \"true\") {\r",
									"    pm.test.skip(\"This test is ignored in CI, because TestUser exists multiple times\");\r",
									"} else {\r",
									"    pm.test(\"This test should pass\", function () {\r",
									"        pm.expect(responseCode.code).to.equal(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"User_name\": \"TestUser\",\r\n    \"Password\": \"testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "chatToken",
			"value": "bde82acc-b019-4e13-9e8c-52f26e8489e2",
			"type": "string"
		},
		{
			"key": "id",
			"value": "20",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "8",
			"type": "string"
		}
	]
}